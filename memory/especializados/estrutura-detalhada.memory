# üèóÔ∏è Estrutura T√©cnica do Projeto - Claude Code CLI

**Tipo:** Memory Document
**Prioridade:** Alta
**Contexto:** Detalhamento t√©cnico completo da estrutura para automa√ß√£o

## üìÅ Estrutura Detalhada e Prop√≥sitos

### Diret√≥rios Principais

#### `/` (Raiz do Projeto)
- **CLAUDE.md**: Hub central de contexto para Claude Code CLI
- **README.md**: Documenta√ß√£o humana para onboarding e colabora√ß√£o

#### `memory/` - Mem√≥rias Inteligentes
- **guia-claude-code-cli.md**: Documenta√ß√£o oficial completa com links
- **checklist.memory**: Checklists de verifica√ß√£o e manuten√ß√£o
- **comandos.memory**: Comandos essenciais e refer√™ncias r√°pidas
- **estrutura-projeto.memory**: Este arquivo - detalhamento t√©cnico
- **automacao-memory.memory**: Scripts e automa√ß√µes t√©cnicas
- **README.md**: Documenta√ß√£o do sistema de mem√≥rias

#### `docs/` - Documenta√ß√£o T√©cnica
- **arquitetura.md**: Arquitetura completa do ecossistema
- Prop√≥sito: Documenta√ß√£o t√©cnica aprofundada para desenvolvedores

#### `scripts/` - Automa√ß√£o
- **setup.sh**: Configura√ß√£o inicial e valida√ß√£o do ambiente
- **backup.sh**: Backup automatizado com snapshots
- Prop√≥sito: Automatizar tarefas repetitivas e manuten√ß√£o

#### `configs/` - Configura√ß√µes
- **dev.env**: Vari√°veis de ambiente de desenvolvimento
- **prod.env**: Vari√°veis de ambiente de produ√ß√£o
- Prop√≥sito: Configura√ß√µes espec√≠ficas por ambiente

#### `backup/` - Snapshots
- Prop√≥sito: Armazenar backups autom√°ticos do sistema
- Formato: `snapshot-YYYYMMDD_HHMMSS.tar.gz`
- Reten√ß√£o: √öltimos 5 backups automaticamente

#### `logs/` - Logs e Auditoria
- **setup.log**: Logs de configura√ß√£o
- **backup.log**: Logs de backups
- **session.log**: Logs de sess√µes Claude Code
- Prop√≥sito: Auditoria e troubleshooting

#### `agents/` - Subagentes Personalizados
- **security-agent.json**: Agente especializado em seguran√ßa
- **performance-agent.json**: Agente especializado em performance
- Prop√≥sito: Extens√£o de capacidades do Claude Code CLI

#### `tests/` - Valida√ß√£o Automatizada
- **test_memory.sh**: Valida√ß√£o de arquivos de mem√≥ria
- Prop√≥sito: Garantir integridade do sistema

#### `projects/` - Projetos Modulares
- **projeto-a/**: Projeto exemplo de documenta√ß√£o
- **projeto-b/**: Projeto exemplo de an√°lise de c√≥digo
- Prop√≥sito: Contexto isolado por projeto com heran√ßa global

## üîß Como o Claude Code CLI Deve Usar Esta Estrutura

### Context Loading
1. Carregar `CLAUDE.md` principal
2. Processar imports de mem√≥ria automaticamente
3. Disponibilizar contexto combinado durante sess√£o

### Navega√ß√£o de Projetos
- Raiz: Contexto global completo
- Subprojetos: Contexto isolado + heran√ßa global
- Mem√≥rias: Acesso via `/memory retrieve <nome>`

### Automa√ß√£o Integrada
- Scripts execut√°veis via Bash tool
- Configura√ß√µes carregadas por ambiente
- Logs registrados automaticamente

### Valida√ß√£o Cont√≠nua
- Testes executados automaticamente
- Integrity check de arquivos de mem√≥ria
- Verifica√ß√£o de imports e refer√™ncias

## üéØ Recomenda√ß√µes de Uso para Claude Code CLI

1. **Sempre verifique** se os arquivos de mem√≥ria existem antes de referenciar
2. **Use os scripts** para opera√ß√µes de manuten√ß√£o
3. **Respeite o isolamento** de projetos
4. **Registre a√ß√µes** nos logs apropriados
5. **Valide altera√ß√µes** antes de aplicar

## üöÄ Fluxos de Automa√ß√£o

### Setup Novo Projeto
1. Executar `./scripts/setup.sh`
2. Validar com `./tests/test_memory.sh`
3. Criar snapshot com `./scripts/backup.sh`

### Manuten√ß√£o Di√°ria
1. Verificar logs em `logs/`
2. Limpar backups antigos (autom√°tico)
3. Atualizar mem√≥rias conforme necess√°rio

### Recupera√ß√£o de Desastres
1. Restaurar do backup mais recente em `backup/`
2. Executar valida√ß√£o completa
3. Reconstruir √≠ndices de mem√≥ria
