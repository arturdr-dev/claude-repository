# üîß Automa√ß√£o e Scripts T√©cnicos - Claude Code CLI

**Tipo:** Memory Document
**Prioridade:** Alta
**Contexto:** Detalhamento t√©cnico de scripts e automa√ß√µes

## üìú Scripts Dispon√≠veis

### setup.sh - Configura√ß√£o Inicial

**Localiza√ß√£o:** `scripts/setup.sh`
**Prop√≥sito:** Configurar ambiente e validar instala√ß√£o
**Execu√ß√£o:** `./scripts/setup.sh`

**Valida√ß√µes realizadas:**
- Verificar instala√ß√£o Claude CLI (`claude --version`)
- Verificar configura√ß√£o MCP (`~/.claude/mcp.json`)
- Validar arquivos de mem√≥ria essenciais
- Criar estrutura de diret√≥rios
- Registrar log em `logs/setup.log`

**Uso recomendado:**
- Ap√≥s clonar o projeto
- Quando houver altera√ß√µes estruturais
- Para troubleshooting de instala√ß√£o

### backup.sh - Backup Automatizado

**Localiza√ß√£o:** `scripts/backup.sh`
**Prop√≥sito:** Criar snapshots autom√°ticos do ecossistema
**Execu√ß√£o:** `./scripts/backup.sh`

**Arquivos inclu√≠dos no backup:**
- `CLAUDE.md` (contexto principal)
- `memory/` (todas as mem√≥rias)
- `docs/` (documenta√ß√£o t√©cnica)
- `scripts/` (scripts de automa√ß√£o)
- `configs/` (configura√ß√µes)
- `agents/` (agentes personalizados)
- `projects/` (projetos modulares)

**Exclus√µes:**
- `backup/` (evitar backup recursivo)
- `logs/` (logs podem ser regenerados)

**Reten√ß√£o autom√°tica:** Mant√©m √∫ltimos 5 backups
**Registro:** Log em `logs/backup.log`

## üß™ Scripts de Teste

### test_memory.sh - Valida√ß√£o de Mem√≥rias

**Localiza√ß√£o:** `tests/test_memory.sh`
**Prop√≥sito:** Validar integridade dos arquivos de mem√≥ria
**Execu√ß√£o:** `./tests/test_memory.sh`

**Valida√ß√µes:**
- Verificar exist√™ncia de arquivos essenciais:
  - `memory/guia-claude-code-cli.md`
  - `memory/checklist.memory`
  - `memory/comandos.memory`
- Verificar imports em `CLAUDE.md`
- Validar sintaxe b√°sica dos arquivos

**C√≥digos de sa√≠da:**
- 0: Sucesso
- 1: Erro cr√≠tico (arquivo ausente ou inv√°lido)

## ‚öôÔ∏è Configura√ß√µes de Ambiente

### dev.env - Desenvolvimento

**Localiza√ß√£o:** `configs/dev.env`
**Prop√≥sito:** Configura√ß√µes para ambiente de desenvolvimento

**Vari√°veis principais:**
- `CLAUDE_DEBUG=false`
- `CLAUDE_VERBOSE=true`
- `MCP_DEBUG=false`
- `ENABLE_GITHUB_INTEGRATION=true`
- `ENABLE_NOTION_INTEGRATION=true`

### prod.env - Produ√ß√£o

**Localiza√ß√£o:** `configs/prod.env`
**Prop√≥sito:** Configura√ß√µes otimizadas para produ√ß√£o

**Vari√°veis principais:**
- `CLAUDE_DEBUG=false`
- `CLAUDE_VERBOSE=false`
- `MCP_DEBUG=false`
- `ENABLE_AUDIT_LOG=true`
- `SESSION_TIMEOUT=3600`

## ü§ñ Agentes Personalizados

### security-agent.json

**Localiza√ß√£o:** `agents/security-agent.json`
**Capacidades:**
- security-review
- vulnerability-scan
- compliance-check
- security-audit

**Ferramentas permitidas:**
- Read
- Grep
- Bash

### performance-agent.json

**Localiza√ß√£o:** `agents/performance-agent.json`
**Capacidades:**
- performance-analysis
- bottleneck-identification
- optimization-recommendations
- benchmarking

**Ferramentas permitidas:**
- Read
- Bash
- Grep

## üöÄ Fluxos de Automa√ß√£o para Claude Code CLI

### Setup Inicial Autom√°tico
```bash
# Verificar instala√ß√£o
if ! command -v claude &> /dev/null; then
    echo "‚ùå Claude CLI n√£o encontrado"
    exit 1
fi

# Executar script de setup
./scripts/setup.sh

# Validar sistema
./tests/test_memory.sh
```

### Backup Programado (sugest√£o para cron)
```bash
# Backup di√°rio √†s 2h da manh√£
0 2 * * * cd /path/to/Claude && ./scripts/backup.sh
```

### Valida√ß√£o Cont√≠nua
```bash
# Antes de commits importantes
if ! ./tests/test_memory.sh; then
    echo "‚ùå Falha na valida√ß√£o de mem√≥rias"
    exit 1
fi
```

## üìù Como Claude Code CLI Deve Usar Estes Scripts

### Durante Sess√µes Interativas
1. **Sugerir setup** quando detectar ambiente n√£o configurado
2. **Recomendar backup** antes de altera√ß√µes estruturais
3. **Executar testes** para validar configura√ß√µes

### Para Automa√ß√£o de Tarefas
1. **Usar scripts como templates** para novas automa√ß√µes
2. **Respeitar estrutura de logs** para registro de a√ß√µes
3. **Seguir padr√µes de nomenclatura** e organiza√ß√£o

### Para Manuten√ß√£o Proativa
1. **Verificar logs** periodicamente
2. **Sugerir limpeza** de backups antigos
3. **Recomendar atualiza√ß√µes** de configura√ß√µes

## üîç Troubleshooting Comum

### Scripts n√£o execut√°veis
```bash
chmod +x scripts/*.sh tests/*.sh
```

### Problemas de permiss√£o em logs
```bash
chmod 755 logs/
touch logs/{setup,backup,session}.log
```

### Valida√ß√£o de mem√≥ria falhando
1. Verificar se arquivos existem em `memory/`
2. Validar sintaxe dos imports em `CLAUDE.md`
3. Verificar permiss√µes de leitura

### Backup falhando
1. Verificar espa√ßo em disco
2. Validar permiss√µes de escrita em `backup/`
3. Verificar se n√£o h√° arquivos corrompidos
