#!/bin/bash
# üõ†Ô∏è Claude Resources Manager - Script Completo de Gerenciamento
# Gerencia todos os reposit√≥rios, templates e recursos Claude Code

echo "üõ†Ô∏è CLAUDE RESOURCES MANAGER"
echo "==========================="
echo ""

# Cores para output
GREEN='\033[0;32m'
BLUE='\033[0;34m'
YELLOW='\033[1;33m'
RED='\033[0;31m'
CYAN='\033[0;36m'
NC='\033[0m'

# Fun√ß√µes de logging
log_info() {
    echo -e "${BLUE}‚ÑπÔ∏è  $1${NC}"
}

log_success() {
    echo -e "${GREEN}‚úÖ $1${NC}"
}

log_warning() {
    echo -e "${YELLOW}‚ö†Ô∏è  $1${NC}"
}

log_error() {
    echo -e "${RED}‚ùå $1${NC}"
}

log_header() {
    echo -e "${CYAN}üîß $1${NC}"
}

# Diret√≥rios
CLAUDE_DIR="/home/arturdr/Claude"
RESOURCES_DIR="$CLAUDE_DIR/resources"
WORKSPACE_DIR="$CLAUDE_DIR/workspace"

case "${1:-status}" in
    "status")
        log_header "STATUS COMPLETO DOS RECURSOS CLAUDE CODE"
        echo ""

        echo "üìÇ Recursos Principais:"
        echo "   üç≥ Cookbooks (Oficial): $RESOURCES_DIR/claude-cookbooks"
        echo "   üìã GitHub Repos: $RESOURCES_DIR/github-repos"
        echo "   üíº Workspace: $WORKSPACE_DIR"
        echo ""

        echo "üîó Atalhos Dispon√≠veis:"
        for link in official-claude-code awesome-claude-code claude-templates superclaude-framework claude-setup-example; do
            if [ -L "$CLAUDE_DIR/$link" ]; then
                target=$(readlink "$CLAUDE_DIR/$link")
                echo "   ‚úÖ $link ‚Üí $target"
            else
                echo "   ‚ùå $link ‚Üí n√£o encontrado"
            fi
        done
        echo ""

        echo "üìÅ Estrutura de Reposit√≥rios:"
        if [ -d "$RESOURCES_DIR/github-repos" ]; then
            cd "$RESOURCES_DIR/github-repos"
            for repo in */; do
                if [ -d "$repo" ]; then
                    cd "$repo"
                    status=$(git status --porcelain 2>/dev/null | wc -l)
                    if [ "$status" -eq 0 ]; then
                        echo "   ‚úÖ ${repo%/} (limpo)"
                    else
                        echo "   ‚ö†Ô∏è  ${repo%/} ($status arquivos modificados)"
                    fi
                    cd ..
                fi
            done
        fi
        ;;

    "update")
        log_header "ATUALIZANDO TODOS OS REPOSIT√ìRIOS"
        echo ""

        if [ -d "$RESOURCES_DIR/github-repos" ]; then
            cd "$RESOURCES_DIR/github-repos"
            for repo in */; do
                if [ -d "$repo" ]; then
                    log_info "Atualizando ${repo%/}..."
                    cd "$repo"
                    git pull origin main 2>/dev/null || git pull origin master 2>/dev/null || log_warning "Falha ao atualizar ${repo%/}"
                    cd ..
                fi
            done
        fi

        # Atualizar Cookbooks tamb√©m
        if [ -d "$RESOURCES_DIR/claude-cookbooks" ]; then
            log_info "Atualizando Claude Cookbooks..."
            cd "$RESOURCES_DIR/claude-cookbooks"
            git pull origin main 2>/dev/null || log_warning "Falha ao atualizar Cookbooks"
        fi

        log_success "Todos os reposit√≥rios atualizados!"
        ;;

    "setup")
        log_header "CONFIGURAR AMBIENTE CLAUDE CODE"
        echo ""

        # Criar estrutura de workspace
        log_info "Criando estrutura de workspace..."
        mkdir -p "$WORKSPACE_DIR"/{projects,templates,examples,frameworks,scripts}

        # Copiar templates b√°sicos
        if [ -d "$CLAUDE_DIR/claude-templates" ]; then
            log_info "Copiando templates para workspace..."
            cp -r "$CLAUDE_DIR/claude-templates/templates/"* "$WORKSPACE_DIR/templates/" 2>/dev/null || true
        fi

        # Copiar exemplos do setup
        if [ -d "$CLAUDE_DIR/claude-setup-example" ]; then
            log_info "Copiando exemplos de setup..."
            cp -r "$CLAUDE_DIR/claude-setup-example/examples/"* "$WORKSPACE_DIR/examples/" 2>/dev/null || true
        fi

        # Criar script de ativa√ß√£o r√°pida
        cat > "$CLAUDE_DIR/start-dev" << 'EOF'
#!/bin/bash
# üöÄ Quick Development Environment Start
echo "üöÄ Iniciando ambiente Claude Code..."
echo ""
echo "üìä Status dos recursos:"
./scripts/manage-claude-resources.sh status
echo ""
echo "üéØ Ambiente pronto para desenvolvimento!"
echo "   ‚Ä¢ Use 'claude' para iniciar sess√£o"
echo "   ‚Ä¢ Explore templates em ./workspace/templates"
echo "   ‚Ä¢ Ver exemplos em ./workspace/examples"
echo "   ‚Ä¢ Consulte Cookbooks em ./cookbooks"
EOF
        chmod +x "$CLAUDE_DIR/start-dev"

        log_success "Ambiente configurado com sucesso!"
        echo "   ‚Ä¢ Execute './start-dev' para iniciar desenvolvimento"
        ;;

    "explore")
        log_header "EXPLORANDO RECURSOS CLAUDE CODE"
        echo ""

        echo "üç≥ Claude Cookbooks (Oficial Anthropic):"
        if [ -d "$RESOURCES_DIR/claude-cookbooks" ]; then
            cd "$RESOURCES_DIR/claude-cookbooks"
            echo "   üìÅ Principais categorias:"
            ls -1 */ | head -8 | sed 's/^/      ‚Ä¢ /'
            echo "   üìñ Exemplos de API, multimodal, RAG, agents..."
        fi
        echo ""

        echo "üìã Awesome Claude Code (Recursos Curados):"
        if [ -d "$CLAUDE_DIR/awesome-claude-code" ]; then
            cd "$CLAUDE_DIR/awesome-claude-code"
            echo "   üìÅ Principais se√ß√µes:"
            ls -1 */ | head -8 | sed 's/^/      ‚Ä¢ /'
            echo "   üìñ Commands, agents, workflows, ferramentas..."
        fi
        echo ""

        echo "üé® Claude Templates (Configura√ß√µes Prontas):"
        if [ -d "$CLAUDE_DIR/claude-templates" ]; then
            cd "$CLAUDE_DIR/claude-templates"
            echo "   üìÅ Templates dispon√≠veis:"
            find . -name "*.json" -o -name "*.md" | head -8 | sed 's/^/      ‚Ä¢ /'
            echo "   üìñ Configura√ß√µes prontas para diferentes dom√≠nios..."
        fi
        echo ""

        echo "üöÄ SuperClaude Framework (Avan√ßado):"
        if [ -d "$CLAUDE_DIR/superclaude-framework" ]; then
            cd "$CLAUDE_DIR/superclaude-framework"
            echo "   üìÅ Componentes:"
            ls -1 */ | head -8 | sed 's/^/      ‚Ä¢ /'
            echo "   üìñ 26 commands, 16 agents, 8 MCP servers..."
        fi
        ;;

    "clean")
        log_header "LIMPANDO E OTIMIZANDO RECURSOS"
        echo ""

        # Limpar arquivos tempor√°rios
        log_info "Limpando arquivos tempor√°rios..."
        find "$CLAUDE_DIR" -name "*.pyc" -delete 2>/dev/null || true
        find "$CLAUDE_DIR" -name "__pycache__" -type d -exec rm -rf {} + 2>/dev/null || true

        # Verificar reposit√≥rios sujos
        log_info "Verificando status dos reposit√≥rios..."
        if [ -d "$RESOURCES_DIR/github-repos" ]; then
            cd "$RESOURCES_DIR/github-repos"
            for repo in */; do
                if [ -d "$repo" ]; then
                    cd "$repo"
                    if ! git diff --quiet || ! git diff --cached --quiet; then
                        log_warning "${repo%/} tem modifica√ß√µes n√£o commitadas"
                    fi
                    cd ..
                fi
            done
        fi

        log_success "Limpeza conclu√≠da!"
        ;;

    "help"|"-h"|"--help")
        echo "üõ†Ô∏è  Claude Resources Manager - Uso:"
        echo ""
        echo "Comandos dispon√≠veis:"
        echo "  status    - Mostrar status completo dos recursos"
        echo "  update    - Atualizar todos os reposit√≥rios Git"
        echo "  setup     - Configurar ambiente de desenvolvimento"
        echo "  explore   - Explorar recursos dispon√≠veis"
        echo "  clean     - Limpar e otimizar recursos"
        echo "  help      - Mostrar esta ajuda"
        echo ""
        echo "Exemplos:"
        echo "  ./scripts/manage-claude-resources.sh status"
        echo "  ./scripts/manage-claude-resources.sh update"
        echo "  ./scripts/manage-claude-resources.sh setup"
        echo ""
        echo "Recursos gerenciados:"
        echo "  ‚Ä¢ Claude Cookbooks (Oficial Anthropic)"
        echo "  ‚Ä¢ awesome-claude-code (Recursos curados)"
        echo "  ‚Ä¢ claude-code-templates (Templates prontos)"
        echo "  ‚Ä¢ SuperClaude Framework (Framework avan√ßado)"
        echo "  ‚Ä¢ my-claude-code-setup (Exemplos pr√°ticos)"
        ;;

    *)
        log_error "Comando desconhecido: $1"
        echo ""
        ./scripts/manage-claude-resources.sh help
        exit 1
        ;;
esac

echo ""
log_success "Opera√ß√£o conclu√≠da com sucesso! ‚ú®"